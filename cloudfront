AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template to deploy a React app with CloudFront and Lambda@Edge.

Resources:
  # S3 Bucket for the React App
  ReactAppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'react-app-bucket-${AWS::AccountId}'
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # CloudFront Origin Access Identity to restrict access to the S3 bucket
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "OAI for React App S3 bucket"

  # S3 Bucket Policy to allow CloudFront access
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ReactAppBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipalRead
            Effect: Allow
            Principal:
              AWS: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${ReactAppBucket}/*'

  # Lambda Function for CloudFront
  CloudFrontLambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "CloudFrontLambdaEdgeFunction-${AWS::AccountId}"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-lambda-function-code-bucket
        S3Key: your-lambda-function-code.zip
      Runtime: nodejs18.x
      MemorySize: 128
      Timeout: 5

  # Lambda Execution Role for the Lambda@Edge
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaEdgeExecutionRole-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaEdgeBasicExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt ReactAppBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !GetAtt CloudFrontLambdaEdgeFunction.Arn
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
        Enabled: true
        DefaultRootObject: index.html
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        HttpVersion: http2
        PriceClass: PriceClass_100

Outputs:
  S3BucketURL:
    Description: "URL of the S3 Bucket"
    Value: !GetAtt ReactAppBucket.WebsiteURL

  CloudFrontURL:
    Description: "CloudFront Distribution URL"
    Value: !GetAtt CloudFrontDistribution.DomainName