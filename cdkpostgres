import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as rds from 'aws-cdk-lib/aws-rds';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';

export class CdkPostgresDbStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // Import the existing VPC by name
    const vpc = ec2.Vpc.fromLookup(this, 'AppleVpc', {
      vpcName: 'Apple',
    });

    // Create a Secrets Manager secret for the RDS credentials
    const dbSecret = new secretsmanager.Secret(this, 'PostgresSecret', {
      secretName: 'PostgresDBSecret',
      generateSecretString: {
        secretStringTemplate: JSON.stringify({
          username: 'admin',
        }),
        generateStringKey: 'password',
        excludePunctuation: true,
        includeSpace: false,
      },
    });

    // Create the RDS PostgreSQL instance
    const dbInstance = new rds.DatabaseInstance(this, 'PostgresInstance', {
      engine: rds.DatabaseInstanceEngine.postgres({
        version: rds.PostgresEngineVersion.VER_13_4,
      }),
      instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.MICRO),
      vpc,
      credentials: rds.Credentials.fromSecret(dbSecret), // Use credentials from the secret
      multiAz: true,
      allocatedStorage: 100,
      maxAllocatedStorage: 200,
      publiclyAccessible: false,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PRIVATE_WITH_NAT, // Use the private subnets with NAT in the existing VPC
      },
      deletionProtection: false,
      databaseName: 'MyDatabase',
    });

    // Output the RDS instance endpoint
    new cdk.CfnOutput(this, 'DBEndpoint', {
      value: dbInstance.instanceEndpoint.hostname,
    });

    // Output the secret name
    new cdk.CfnOutput(this, 'DBSecretName', {
      value: dbSecret.secretName,
    });
  }
}